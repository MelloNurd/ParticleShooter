#pragma kernel CSMain

struct Particle
{
    float3 position; // 12 bytes
    float3 velocity; // 12 bytes
    int type; // 4 bytes
    float padding; // 4 bytes (Align to 32 bytes)
};


RWStructuredBuffer<Particle> particles;
RWStructuredBuffer<float> forces;
RWStructuredBuffer<float> minDistances;

float dampening;
float friction;
float deltaTime;
int numParticles;
int numTypes;

[numthreads(256, 1, 1)]
void CSMain(uint id : SV_DispatchThreadID)
{
    if (id >= numParticles)
        return;

    Particle p = particles[id];
    float3 totalForce = float3(0, 0, 0);

    for (uint j = 0; j < numParticles; j++)
    {
        if (id == j)
            continue;

        Particle other = particles[j];
        float3 dir = other.position - p.position;
        float sqrDistance = dot(dir, dir);

        int forceIndex = p.type * numTypes + other.type;
        if (sqrDistance < minDistances[forceIndex])
        {
            float force = forces[forceIndex];
            float effect = lerp(1, 0, sqrt(sqrDistance) / minDistances[forceIndex]);
            totalForce += normalize(dir) * force * effect * dampening;
        }
    }

    // Apply physics
    p.velocity += totalForce * deltaTime;
    p.velocity *= friction;
    p.position += p.velocity * deltaTime;

    // Write back updated particle data
    particles[id] = p;
}
